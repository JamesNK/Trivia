@page "/playtrivia"
@using Grpc.Core
@using TriviaGame
@implements IDisposable

@inject Trivia.TriviaClient TriviaClient

@if (!Started)
{
    <StartTriviaComponent OnClick="SendStartTrivia" />
}
<QuestionComponent Question="@Question" OnClick="SendAnswer" />
@if (WaitingForPlayers)
{
    <p>Waiting for other players...</p>
}
@if (AllAnswerSent.Task.IsCompleted)
{
    <p>Score</p>
    <p>@Score</p>
}

@code {
    private TriviaQuestion Question { get; set; }
    private Game Game { get; set; }
    private Player Player { get; set; }
    private string Answer { get; set; }
    private bool Started { get; set; }
    private bool WaitingForPlayers { get; set; }
    private int Score { get; set; }
    private int NumberOfQuestions { get; set; }
    private int NumberOfQuestionsAnswered { get; set; }
    private TaskCompletionSource<object> AllAnswerSent { get; } = new TaskCompletionSource<object>();

    private AsyncDuplexStreamingCall<TriviaAnswer, TriviaQuestion> Call { get; set; }

    private async Task SendStartTrivia(string name)
    {
        WaitingForPlayers = true;
        await InvokeAsync(() => base.StateHasChanged());

        Player = new Player { Name = name };
        Game = await TriviaClient.StartTriviaAsync(Player);
        Started = true;
        WaitingForPlayers = false;
        await InvokeAsync(() => base.StateHasChanged());

        var metadata = new Metadata();
        metadata.Add("playername", Player.Name);
        metadata.Add("gameid", Game.GameID);
        Call = TriviaClient.PlayTrivia(metadata);
        var responseHeaders = await Call.ResponseHeadersAsync;
        NumberOfQuestions = int.Parse(responseHeaders.SingleOrDefault(h => h.Key == "numberofquestions").Value);

        var readTask = Task.Run(async () =>
        {
            await foreach (var triviaQuestion in Call.ResponseStream.ReadAllAsync())
            {
                WaitingForPlayers = false;
                Question = triviaQuestion;
                await InvokeAsync(() => base.StateHasChanged());
            }
        });

        await AllAnswerSent.Task;
        await Call.RequestStream.CompleteAsync();
        await readTask;

        Question = null;

        var result = await TriviaClient.TriviaScoreAsync(new TriviaSession { Game = Game, Player = Player });
        Score = result.Score;

        await InvokeAsync(() => base.StateHasChanged());
    }

    private async Task SendAnswer(TriviaAnswer answer)
    {
        await Call.RequestStream.WriteAsync(answer);
        NumberOfQuestionsAnswered++;


        if (NumberOfQuestionsAnswered == NumberOfQuestions)
        {
            AllAnswerSent.SetResult(null);
        }
        else
        {
            WaitingForPlayers = true;
            await InvokeAsync(() => base.StateHasChanged());
        }
    }

    public void Dispose()
    {
        Call?.Dispose();
    }

}
