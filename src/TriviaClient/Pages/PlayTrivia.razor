@page "/playtrivia"
@using Grpc.Core
@using TriviaGame
@implements IDisposable

@inject Trivia.TriviaClient TriviaClient

@if (!Started)
{
    <StartTriviaComponent OnClick="SendStartTrivia" />
}
<QuestionComponent Question="@Question" OnClick="SendAnswer" />
@if (Ended)
{
    <p>Score</p>
    <p>@Score</p>
}

@code {
    private TriviaQuestion Question { get; set; }
    private Game Game { get; set; }
    private Player Player { get; set; }
    private string Answer { get; set; }
    private bool Started { get; set; }
    private bool Ended { get; set; }
    private int Score { get; set; }

    private AsyncDuplexStreamingCall<TriviaAnswer, TriviaQuestion> Call { get; set; }

    private async Task SendStartTrivia(string name)
    {
        Player = new Player { Name = name };
        Game = await TriviaClient.StartTriviaAsync(Player);
        Started = true;
        await InvokeAsync(() => base.StateHasChanged());

        var metadata = new Metadata();
        metadata.Add("playername", Player.Name);
        metadata.Add("gameid", Game.GameID);
        Call = TriviaClient.PlayTrivia(metadata);

        _ = Task.Run(async () =>
        {
            await foreach (var triviaQuestion in Call.ResponseStream.ReadAllAsync())
            {
                Question = triviaQuestion;
                await InvokeAsync(() => base.StateHasChanged());
            }

            Question = null;
            Ended = true;

            var result = await TriviaClient.TriviaScoreAsync(new TriviaSession { Game = Game, Player = Player });
            Score = result.Score;

            await InvokeAsync(() => base.StateHasChanged());
        });
    }

    private async Task SendAnswer(TriviaAnswer answer)
    {
        await Call.RequestStream.WriteAsync(answer);
    }

    public void Dispose()
    {
        Call.Dispose();
    }

}
